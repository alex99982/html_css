https://fls.guru/
Sass (Syntactically Awesome Style Sheets) — это препроцессор CSS, который позволяет использовать более сложные функции, 
чем стандартный CSS. Он упрощает написание стилей и делает
код более структурированным и удобным для поддержки. Вот основные возможности и принципы работы с Sass: 

Сайт препроцессора SASS
https://sass-scss.ru/guide/

liveSassCompile.settings.showOutputWindowOn": "None",

"liveSassCompile.settings.formats": [
        {
            "format": "expanded",
            "extensionName": ".css",
            "savePath": "~/../css",            
        },
        {
            "format": "compressed",
            "extensionName": ".min.css",
            "savePath": "~/../css", 
        }
    ],


Синтаксис
Вложенность
Переменные
Импорт
Шаблоны
Миксины
Математика
Комментирование



1. Синтаксис
Sass поддерживает два синтаксиса:

SCSS (Sassy CSS): Использует фигурные скобки и точки с запятой, как обычный CSS. Файлы имеют расширение .scss.
Sass: Более лаконичный синтаксис, без фигурных скобок и точек с запятой. Файлы имеют расширение .sass.
Пример SCSS:

body {
    color: black;
}
Пример Sass:



body
    color black
2. Вложенность
Sass позволяет использовать вложенные селекторы, что делает код более читаемым и организованным.

Пример:



nav {
    ul {
        list-style: none;
    }

    li {
        display: inline-block;
    }
}
3. Переменные
Переменные позволяют хранить значения (например, цвета, шрифты) и повторно использовать их.

Пример:



$primary-color: #3498db;

body {
    background-color: $primary-color;
}
4. Импорт
С помощью директивы @import можно подключать другие файлы SCSS, что помогает организовать код.

Пример:



@import 'variables';
@import 'mixins';
5. Шаблоны
Sass поддерживает шаблоны, что позволяет создавать базовые стили, которые могут быть использованы в других селекторах.

Пример:

%message {
    padding: 10px;
    border: 1px solid #ccc;
}

.success {
    @extend %message;
    border-color: green;
}
6. Миксины
Миксины позволяют создавать группы стилей, которые можно использовать в разных местах с параметрами.

Пример:

@mixin border-radius($radius) {
    border-radius: $radius;
    -webkit-border-radius: $radius;
    -moz-border-radius: $radius;
}

.box {
    @include border-radius(10px);
}
7. Математика
Sass поддерживает арифметические операции, что позволяет производить вычисления непосредственно в стилях.

Пример:

$base-font-size: 16px;
$header-font-size: $base-font-size * 1.5;

h1 {
    font-size: $header-font-size;
}
8. Комментирование
В Sass поддерживаются два типа комментариев:

Однострочные: начинаются с //, не попадают в скомпилированный CSS.
Многострочные: начинаются с /* и заканчиваются на */, попадают в скомпилированный CSS.

Пример:

// Это однострочный комментарий
body {
    color: black; /* Это многострочный комментарий */
}
Заключение
Sass предоставляет мощные инструменты для упрощения и улучшения процесса написания CSS. Используйте переменные, вложенность, миксины и другие возможности для создания чистого и поддерживаемого кода. Если у вас есть дополнительные вопросы о Sass, дайте знать!


